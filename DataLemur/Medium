Assume you are given the table below on Uber transactions made by users. 
Write a query to obtain the third transaction of every user.
Output the user id, spend and transaction date.

SELECT user_id,
        spend,
        transaction_date
from (SELECT *,
      row_number() over (PARTITION by user_id order by transaction_date asc) as row_number 
from transactions) as table1
where row_number = 3;

=================================================================================================================================

Given a table of tweet data over a specified time period, calculate the 3-day rolling average of tweets for each user. 
Output the user ID, tweet date, and rolling averages rounded to 2 decimal places.

Notes:

A rolling average, also known as a moving average or running mean is a time-series technique 
that examines trends in data over a specified period of time.
In this case, we want to determine how the tweet count for each user changes over a 3-day period.

SELECT 
        user_id,
        tweet_date,
        ROUND(AVG(tweet_count) OVER (
        PARTITION BY user_id
        ORDER BY tweet_date
        ROWS Between 2 PRECEDING and current row), 2) rolling_avg_3d
FROM tweets

=============================================================================================================================================

Assume you're given a table with measurement values obtained from a Google sensor over multiple days with measurements taken multiple times within each day.

Write a query to calculate the sum of odd-numbered and even-numbered measurements separately for a particular day and display the results in two different columns. 
Refer to the Example Output below for the desired format.

Definition:

Within a day, measurements taken at 1st, 3rd, and 5th times are considered odd-numbered measurements, 
and measurements taken at 2nd, 4th, and 6th times are considered even-numbered measurements.

SELECT measurement_day,
            SUM(CASE WHEN row_num %2 != 0 then measurement_value else 0 end ) odd_num,           
            SUM(CASE WHEN row_num %2 = 0 then measurement_value else 0 end ) even_num
FROM (
        SELECT measurement_value,CAST(measurement_time AS DATE) measurement_day,
        Row_number() over (PARTITION BY CAST(measurement_time AS DATE) order by measurement_time) row_num
from measurements
                  ) as new
group by measurement_day

======================================================================================================================================================

Your team at JPMorgan Chase is soon launching a new credit card. You are asked to estimate how many cards you'll issue in the first month.

Before you can answer this question, you want to first get some perspective on how well new credit card launches typically do in their first month.

Write a query that outputs the name of the credit card, and how many cards were issued in its launch month. 
The launch month is the earliest record in the monthly_cards_issued table for a given card. 
Order the results starting from the biggest issued amount.

with cte1 AS
(SELECT card_name,
        issued_amount,
        RANK() over (PARTITION BY card_name order by issue_year, issue_month ) rank1
from monthly_cards_issued
)
SELECT card_name,
        issued_amount
from cte1
where rank1= 1
order by issued_amount desc

====================================================================================================================================================

Assume there are three Spotify tables: artists, songs, and global_song_rank, which contain information about the artists, songs, and music charts, respectively.

Write a query to find the top 5 artists whose songs appear most frequently in the Top 10 of the global_song_rank table. 
Display the top 5 artist names in ascending order, along with their song appearance ranking.

Assumptions:

If two or more artists have the same number of song appearances, they should be assigned the same ranking, 
and the rank numbers should be continuous (i.e. 1, 2, 2, 3, 4, 5).
For instance, if both Ed Sheeran and Bad Bunny appear in the Top 10 five times, they should both be ranked 1st and the next artist should be ranked 2nd.

with top_10_songs AS
(
SELECT song_id, rank
from global_song_rank
where rank <= 10
),
counted_songs as
(
SELECT COUNT(top_10_songs.song_id) as counted_song_id, songs.artist_id
from songs
join top_10_songs on top_10_songs.song_id = songs.song_id
GROUP BY artist_id
),
ranked AS
(
SELECT artists.artist_name artist_name, 
        Dense_rank() OVER (order by counted_song_id Desc) artist_rank
from artists
join counted_songs on counted_songs.artist_id= artists.artist_id
) 
SELECT artist_name, artist_rank
from ranked
where artist_rank <= 5 
order by artist_rank ASC, artist_name ASC;

====================================================================================================================================================

Assume you're given tables with information on Snapchat users, including their ages and time spent sending and opening snaps.

Write a query to obtain a breakdown of the time spent sending vs. opening snaps as a percentage of total time spent on these activities grouped by age group. 
Round the percentage to 2 decimal places in the output.

Notes:

Calculate the following percentages:
time spent sending / (Time spent sending + Time spent opening)
Time spent opening / (Time spent sending + Time spent opening)
To avoid integer division in percentages, multiply by 100.0 and not 100.

with cte1 as
(
select age_bucket,
       activities.user_id,
        sum(case when activity_type = 'open' then time_spent else 0 end) open_time,
      sum(case when activity_type = 'send' then time_spent else 0 end) send_time,
      sum(case when activity_type IN ('open','send') then time_spent else 0 end) total_time
from activities
join age_breakdown on age_breakdown.user_id = activities.user_id
group by activities.user_id, age_bucket
)
SELECT age_bucket,
        (ROUND(((100.0* send_time)/total_time), 2)) send_perc,
        (ROUND(((100.0* open_time)/total_time), 2)) open_perc
from cte1
order by age_bucket

Alternative using "CAST"

with cte1 as
(
select age_bucket,
       activities.user_id,
        sum(case when activity_type = 'open' then time_spent else 0 end) open_time,
      sum(case when activity_type = 'send' then time_spent else 0 end) send_time,
      sum(case when activity_type IN ('open','send') then time_spent else 0 end) total_time
from activities
join age_breakdown on age_breakdown.user_id = activities.user_id
group by activities.user_id, age_bucket
)
SELECT age_bucket,
        (ROUND(( 100*CAST (send_time as decimal)/total_time), 2)) send_perc,
        (ROUND((100*CAST (open_time as decimal)/total_time), 2)) open_perc
from cte1
order by age_bucket


====================================================================================================================================================

New TikTok users sign up with their emails. They confirmed their signup by replying to the text confirmation to activate their accounts. 
Users may receive multiple text messages for account confirmation until they have confirmed their new account.

A senior analyst is interested to know the activation rate of specified users in the emails table. Write a query to find the activation rate.
Round the percentage to 2 decimal places.

Definitions:

emails table contain the information of user signup details.
texts table contains the users' activation information.
Assumptions:

The analyst is interested in the activation rate of specific users in the emails table, 
which may not include all users that could potentially be found in the texts table.
For example, user 123 in the emails table may not be in the texts table and vice versa.

with cte1 AS
(
SELECT texts.email_id, Count(*) as total_users_having_email_id
from   emails
left join texts on texts.email_id = emails.email_id
GROUP BY texts.email_id
),
new as 
(
SELECT emails.email_id, SUM(Case WHEN signup_action = 'Confirmed' then 1 else 0 end) confirmed_user
from  emails
left join texts on emails.email_id = texts.email_id
GROUP BY emails.email_id
)
SELECT ROUND(SUM(confirmed_user)/SUM(total_users_having_email_id),2)
from cte1 
join new on new.email_id = cte1.email_id

============================================================================================================================================

Assume you're given a table with information on Amazon customers and their spending on products in different categories, 
write a query to identify the top two highest-grossing products within each category in the year 2022. 
The output should include the category, product, and total spend.


with cte1 AS
(
SELECT category, 
        product,
        sum(spend) as total_spend
from product_spend
where extract(year from transaction_date) = '2022'
group by product, category
),
cte2 AS
(
SELECT category, 
        product,
        total_spend,
        RANK() over (partition by category order by total_spend DESC) as rank1
from cte1
)
SELECT category, 
        product,
        total_spend
from cte2
where rank1 <= 2


=========================================================================================================================================================================
A Microsoft Azure Supercloud customer is a company which buys at least 1 product from each product category.

Write a query to report the company ID which is a Supercloud customer.

SELECT customer_id
from (SELECT 
        COUNT(DISTINCT p.product_category) as total_count,
        customer_id
from customer_contracts c 
join products p on p.product_id = c.product_id
group by customer_id) as a
where total_count = 3


SELECT customer_id
from (
SELECT 
        COUNT(DISTINCT p.product_category) as total_count,
        customer_id
from customer_contracts c 
join products p on p.product_id = c.product_id
group by customer_id
HAVING COUNT(DISTINCT p.product_category) = 3

========================================================================================================================================

Assume you are given the table on Walmart user transactions. Based on a user's most recent transaction date, 
write a query to obtain the users and the number of products bought.

Output the user's most recent transaction date, user ID and the number of products sorted by the transaction date in chronological order.


with xyz as (SELECT max(transaction_date) lst_date, user_id
FROM user_transactions
group by user_id)
select 
  a.transaction_date, 
  a.user_id, 
  count(a.product_id) purchase_count
from 
user_transactions as a  

OR

with cte1 as 
(
SELECT user_id, transaction_date,
product_id,
        RANK() over (partition by user_id order by transaction_date Desc) rank1
from user_transactions
)
SELECT transaction_date, user_id, COUNT(product_id) purchase_count   
from cte1
where rank1 =1
group by transaction_date, user_id
join xyz as b on a.user_id = b.user_id and a.transaction_date = b.lst_date
group by a.transaction_date, a.user_id
) as b
