Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. 
You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.

Write a query to list the candidates who possess all of the required skills for the job. Sort the output by candidate ID in ascending order.

Assumption:

There are no duplicates in the candidates table.

select candidate_id
from candidates
where skill in ( 'Python', 'Tableau', 'PostgreSQL')
group by candidate_id
having count(skill) >= 3
order by candidate_id;
======================================================================================================================================


Assume you're given the tables below about Facebook Page and Page likes (as in "Like a Facebook Page").

Write a query to return the IDs of the Facebook pages which do not possess any likes. The output should be sorted in ascending order.

SELECT p.page_id
from pages p
left join page_likes pl on pl.page_id = p.page_id
where liked_date IS NULL
order by p.page_id;

=======================================================================================================================================

Tesla is investigating production bottlenecks and they need your help to extract the relevant data. 
Write a query that determines which parts with the assembly steps have initiated the assembly process but remain unfinished.

Assumptions:

parts_assembly table contains all parts currently in production, each at varying stages of the assembly process.
An unfinished part is one that lacks a finish_date.
This question is straightforward, so let's approach it with simplicity in both thinking and solution.

Select part,
        assembly_step
from parts_assembly
where finish_date is null

========================================================================================================================================

Assume you're given the table on user viewership categorised by device type where the three types are laptop, tablet, and phone.

Write a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. 
Output the total viewership for laptops as laptop_reviews and the total viewership for mobile devices as mobile_views.

SELECT
      sum(case when device_type = 'laptop' then 1 else 0 end ) laptop_view,
      sum(case when device_type IN ('tablet', 'phone') then 1 else 0 end) mobile_view
from viewership 

========================================================================================================================================

Assume you're given the tables containing completed trade orders and user details in a Robinhood trading system.

Write a query to retrieve the top three cities that have the highest number of completed trade orders listed in descending order. 
Output the city name and the corresponding number of completed trade orders.

with completed_order as
(SELECT *
from trades 
where status= 'Completed'),
count_order as 
  (SELECT u.city,
          COUNT (*) AS total_count
  FROM users u
  join completed_order as co on u.user_id=co.user_id
  group by u.city)
select *
from count_order
order by total_count DESC
LIMIT 3

===========================================================================================================================================

Assume you are given the table below that shows job postings for all companies on the LinkedIn platform. 
Write a query to get the number of companies that have posted duplicate job listings.

Clarification:

Duplicate job listings refer to two jobs at the same company with the same title and description.


with new AS
(
select title,
description, 
company_id,
COUNT(job_id) as job_count
from job_listings
GROUP BY title,
description, 
company_id)

SELECT COUNT(DISTINCT company_id) AS co_w_duplicate_jobs
from new
where job_count >1;

==============================================================================================================================================

Given a table of Facebook posts, for each user who posted at least twice in 2021, 
write a query to find the number of days between each userâ€™s first post of the year and last post of the year in the year 2021. 
Output the user and number of the days between each user's first and last post.

SELECT user_id,
        EXTRACT(Days from (MAx(post_date)- MIn(post_date))) as Between_days
from posts
where EXTRACT(year from post_date) = '2021'
group by 1
having count (post_id) > 1
order by 1
